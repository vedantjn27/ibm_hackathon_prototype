
import json
import requests
import time
from datetime import datetime
import csv
import os
from typing import Dict, List, Any
import google.generativeai as genai
from transformers import pipeline
import pandas as pd
from dotenv import load_dotenv
import sys
import types

# Monkey-patch torch to prevent Streamlit from walking its internals
import torch

if isinstance(torch, types.ModuleType):
    torch.__path__ = []
import streamlit as st
# Load environment variables
load_dotenv()

class DisasterResponseBot:
    def __init__(self):
        # API Keys from environment variables
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        self.weather_api_key = os.getenv("OPENWEATHER_API_KEY")
        
        # Validate API keys
        if not self.gemini_api_key:
            st.error("тЭМ GEMINI_API_KEY not found in environment variables!")
            st.info("Please add your Gemini API key to the .env file")
            st.stop()
            
        if not self.weather_api_key:
            st.error("тЭМ WEATHER_API_KEY not found in environment variables!")
            st.info("Please add your Weather API key to the .env file")
            st.stop()
        
        # Initialize Gemini
        genai.configure(api_key=self.gemini_api_key)
        self.gemini_model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Initialize Granite LLM (via HuggingFace) - Cached loading
        if 'granite_llm' not in st.session_state:
            try:
                with st.spinner("Loading Granite LLM... (This may take a moment first time)"):
                    st.session_state.granite_llm = pipeline(
                        "text-generation", 
                        model="ibm-granite/granite-3b-code-instruct", 
                        trust_remote_code=True,
                        device_map="auto"
                    )
            except Exception as e:
                st.session_state.granite_llm = None
                st.warning("Granite LLM not available, using Gemini for all responses")
        
        self.granite_llm = st.session_state.granite_llm
        
        # Language support
        self.languages = {
            "English": {"code": "en", "flag": "ЁЯЗ║ЁЯЗ╕"},
            "рд╣рд┐рдВрджреА": {"code": "hi", "flag": "ЁЯЗоЁЯЗ│"},
            "р▓Хр▓ир│Нр▓ир▓б": {"code": "kn", "flag": "ЁЯЗоЁЯЗ│"},
            "р░др▒Жр░▓р▒Бр░Чр▒Б": {"code": "te", "flag": "ЁЯЗоЁЯЗ│"},
            "родрооро┐ро┤рпН": {"code": "ta", "flag": "ЁЯЗоЁЯЗ│"},
            "ржмрж╛ржВрж▓рж╛": {"code": "bn", "flag": "ЁЯЗзЁЯЗй"}
        }
        
        # Disaster knowledge base
        self.knowledge_base = {
            "flood": {
                "en": "ЁЯМК **FLOOD SAFETY:**\nтАв Move to higher ground immediately\nтАв Avoid walking/driving through flooded areas\nтАв Stay away from electrical equipment if you're wet\nтАв Listen to emergency broadcasts\nтАв Have emergency supplies ready",
                "hi": "ЁЯМК **рдмрд╛рдврд╝ рдХреА рд╕реБрд░рдХреНрд╖рд╛:**\nтАв рддреБрд░рдВрдд рдКрдВрдЪреА рдЬрдЧрд╣ рдкрд░ рдЬрд╛рдПрдВ\nтАв рдмрд╛рдврд╝ рдХреЗ рдкрд╛рдиреА рдореЗрдВ рдЪрд▓рдиреЗ/рдЧрд╛рдбрд╝реА рдЪрд▓рд╛рдиреЗ рд╕реЗ рдмрдЪреЗрдВ\nтАв рдЧреАрд▓реЗ рд╣реЛрдиреЗ рдкрд░ рдмрд┐рдЬрд▓реА рдХреЗ рдЙрдкрдХрд░рдгреЛрдВ рд╕реЗ рджреВрд░ рд░рд╣реЗрдВ\nтАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдкреНрд░рд╕рд╛рд░рдг рд╕реБрдиреЗрдВ\nтАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╛рдорд╛рди рддреИрдпрд╛рд░ рд░рдЦреЗрдВ",
                "kn": "ЁЯМК **р▓кр│Нр▓░р▓╡р▓╛р▓╣ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж:**\nтАв р▓др▓Хр│Нр▓╖р▓г р▓Ор▓др│Нр▓др▓░р▓ж р▓╕р│Нр▓ер▓│р▓Хр│Нр▓Хр│Ж р▓╣р│Лр▓Чр▓┐\nтАв р▓кр│Нр▓░р▓╡р▓╛р▓╣р▓ж р▓ир│Ар▓░р▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓ир▓бр│Жр▓пр│Бр▓╡р│Бр▓жр│Б/р▓╡р▓╛р▓╣р▓и р▓Ър▓▓р▓╛р▓пр▓┐р▓╕р│Бр▓╡р│Бр▓жр▓ир│Нр▓ир│Б р▓др▓кр│Нр▓кр▓┐р▓╕р▓┐\nтАв р▓Тр▓жр│Нр▓жр│Жр▓пр▓╛р▓Чр▓┐р▓жр│Нр▓жр▓░р│Ж р▓╡р▓┐р▓жр│Нр▓пр│Бр▓др│Н р▓Йр▓кр▓Хр▓░р▓гр▓Чр▓│р▓┐р▓Вр▓ж р▓жр│Вр▓░р▓╡р▓┐р▓░р▓┐\nтАв р▓др│Бр▓░р│Нр▓др│Б р▓кр│Нр▓░р▓╕р▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐\nтАв р▓др│Бр▓░р│Нр▓др│Б р▓╕р▓╛р▓ор▓Чр│Нр▓░р▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р▓┐р▓жр│Нр▓зр▓кр▓бр▓┐р▓╕р▓┐"
            },
            "earthquake": {
                "en": "ЁЯПа **EARTHQUAKE SAFETY:**\nтАв Drop, Cover, Hold On!\nтАв Get under a sturdy table\nтАв Stay away from windows and heavy objects\nтАв If outdoors, move away from buildings\nтАв After shaking stops, evacuate if building is damaged",
                "hi": "ЁЯПа **рднреВрдХрдВрдк рдХреА рд╕реБрд░рдХреНрд╖рд╛:**\nтАв рдЭреБрдХреЗрдВ, рдЫреБрдкреЗрдВ, рдкрдХрдбрд╝реЗрдВ!\nтАв рдордЬрдмреВрдд рдореЗрдЬ рдХреЗ рдиреАрдЪреЗ рдЬрд╛рдПрдВ\nтАв рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рдФрд░ рднрд╛рд░реА рд╡рд╕реНрддреБрдУрдВ рд╕реЗ рджреВрд░ рд░рд╣реЗрдВ\nтАв рдмрд╛рд╣рд░ рд╣реЛрдВ рддреЛ рдЗрдорд╛рд░рддреЛрдВ рд╕реЗ рджреВрд░ рдЬрд╛рдПрдВ\nтАв рд╣рд┐рд▓рдирд╛ рдмрдВрдж рд╣реЛрдиреЗ рдкрд░ рдХреНрд╖рддрд┐рдЧреНрд░рд╕реНрдд рдЗрдорд╛рд░рдд рд╕реЗ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ",
                "kn": "ЁЯПа **р▓нр│Вр▓Хр▓Вр▓к р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж:**\nтАв р▓Хр│Жр▓│р▓Чр│Ж р▓мр▓┐р▓жр│Нр▓жр│Б, р▓ор▓░р│Жр▓пр▓╛р▓Чр▓┐, р▓╣р▓┐р▓бр▓┐р▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐!\nтАв р▓жр│Гр▓вр▓╡р▓╛р▓ж р▓ор│Зр▓Ьр▓┐р▓и р▓Хр│Жр▓│р▓Чр│Ж р▓╣р│Лр▓Чр▓┐\nтАв р▓Хр▓┐р▓Яр▓Хр▓┐р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓нр▓╛р▓░р▓╡р▓╛р▓ж р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р▓┐р▓Вр▓ж р▓жр│Вр▓░р▓╡р▓┐р▓░р▓┐\nтАв р▓╣р│Кр▓░р▓Чр▓┐р▓жр│Нр▓жр▓░р│Ж р▓Хр▓Яр│Нр▓Яр▓бр▓Чр▓│р▓┐р▓Вр▓ж р▓жр│Вр▓░ р▓╣р│Лр▓Чр▓┐\nтАв р▓Ер▓▓р│Бр▓Чр▓╛р▓Я р▓ир▓┐р▓Вр▓д р▓ир▓Вр▓др▓░ р▓╣р▓╛р▓ир▓┐р▓Чр│Кр▓│р▓Чр▓╛р▓ж р▓Хр▓Яр│Нр▓Яр▓бр▓жр▓┐р▓Вр▓ж р▓╣р│Кр▓░р▓мр▓ир│Нр▓ир▓┐"
            },
            "heatwave": {
                "en": "тШАя╕П **HEATWAVE SAFETY:**\nтАв Stay indoors during peak hours (10am-4pm)\nтАв Drink plenty of water regularly\nтАв Wear light-colored, loose clothing\nтАв Use fans, AC, or cool showers\nтАв Check on elderly neighbors",
                "hi": "тШАя╕П **рд▓реВ рдХреА рд╕реБрд░рдХреНрд╖рд╛:**\nтАв рдЪрд░рдо рдШрдВрдЯреЛрдВ (рд╕реБрдмрд╣ 10-рд╢рд╛рдо 4) рдХреЗ рджреМрд░рд╛рди рдШрд░ рдХреЗ рдЕрдВрджрд░ рд░рд╣реЗрдВ\nтАв рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рднрд░рдкреВрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ\nтАв рд╣рд▓реНрдХреЗ рд░рдВрдЧ рдХреЗ рдвреАрд▓реЗ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ\nтАв рдкрдВрдЦреЗ, AC, рдпрд╛ рдардВрдбреЗ рдкрд╛рдиреА рд╕реЗ рдирд╣рд╛рдПрдВ\nтАв рдмреБрдЬреБрд░реНрдЧ рдкрдбрд╝реЛрд╕рд┐рдпреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ",
                "kn": "тШАя╕П **р▓╢р▓╛р▓Цр▓ж р▓Ер▓▓р│Ж р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж:**\nтАв р▓Чр▓░р▓┐р▓╖р│Нр▓а р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ (р▓мр│Жр▓│р▓┐р▓Чр│Нр▓Чр│Ж 10-р▓╕р▓Вр▓Ьр│Ж 4) р▓ор▓ир│Жр▓пр│Кр▓│р▓Чр│Ж р▓Зр▓░р▓┐\nтАв р▓ир▓┐р▓пр▓ор▓┐р▓др▓╡р▓╛р▓Чр▓┐ р▓╕р▓╛р▓Хр▓╖р│Нр▓Яр│Б р▓ир│Ар▓░р│Б р▓Хр│Бр▓бр▓┐р▓пр▓┐р▓░р▓┐\nтАв р▓др▓┐р▓│р▓┐ р▓мр▓гр│Нр▓гр▓ж, р▓╕р▓бр▓┐р▓▓р▓╡р▓╛р▓ж р▓мр▓Яр│Нр▓Яр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓зр▓░р▓┐р▓╕р▓┐\nтАв р▓лр│Нр▓пр▓╛р▓ир│Н, AC, р▓Ер▓ер▓╡р▓╛ р▓др▓гр│Нр▓гр▓ир│Жр▓п р▓╕р│Нр▓ир▓╛р▓и р▓ор▓╛р▓бр▓┐\nтАв р▓╡р▓пр▓╕р│Нр▓╕р▓╛р▓ж р▓ир│Жр▓░р│Жр▓╣р│Кр▓░р│Жр▓пр▓╡р▓░р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐"
            },
            "cyclone": {
                "en": "ЁЯМкя╕П **CYCLONE SAFETY:**\nтАв Stay indoors and away from windows\nтАв Store water and non-perishable food\nтАв Charge all electronic devices\nтАв Keep battery radio for updates\nтАв Secure outdoor items",
                "hi": "ЁЯМкя╕П **рдЪрдХреНрд░рд╡рд╛рдд рдХреА рд╕реБрд░рдХреНрд╖рд╛:**\nтАв рдШрд░ рдХреЗ рдЕрдВрджрд░ рд░рд╣реЗрдВ рдФрд░ рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рд╕реЗ рджреВрд░ рд░рд╣реЗрдВ\nтАв рдкрд╛рдиреА рдФрд░ рд╕реВрдЦрд╛ рдЦрд╛рдирд╛ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ\nтАв рд╕рднреА рдЙрдкрдХрд░рдг рдЪрд╛рд░реНрдЬ рдХрд░реЗрдВ\nтАв рдЕрдкрдбреЗрдЯ рдХреЗ рд▓рд┐рдП рдмреИрдЯрд░реА рд░реЗрдбрд┐рдпреЛ рд░рдЦреЗрдВ\nтАв рдмрд╛рд╣рд░реА рд╡рд╕реНрддреБрдУрдВ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ",
                "kn": "ЁЯМкя╕П **р▓Ър▓Вр▓бр▓ор▓╛р▓░р│Бр▓д р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж:**\nтАв р▓ор▓ир│Жр▓пр│Кр▓│р▓Чр│Ж р▓Зр▓░р▓┐ р▓ор▓др│Нр▓др│Б р▓Хр▓┐р▓Яр▓Хр▓┐р▓Чр▓│р▓┐р▓Вр▓ж р▓жр│Вр▓░р▓╡р▓┐р▓░р▓┐\nтАв р▓ир│Ар▓░р│Б р▓ор▓др│Нр▓др│Б р▓Хр│Жр▓бр▓ж р▓Жр▓╣р▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓╢р│Зр▓Цр▓░р▓┐р▓╕р▓┐\nтАв р▓Ор▓▓р│Нр▓▓р▓╛ р▓╕р▓╛р▓зр▓ир▓Чр▓│р▓ир│Нр▓ир│Б р▓Ър▓╛р▓░р│Нр▓Ьр│Н р▓ор▓╛р▓бр▓┐\nтАв р▓Ер▓кр│НтАМр▓бр│Зр▓Яр│НтАМр▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓мр│Нр▓пр▓╛р▓Яр▓░р▓┐ р▓░р│Зр▓бр▓┐р▓пр│Л р▓Зр▓░р▓┐р▓╕р▓┐\nтАв р▓╣р│Кр▓░р▓Чр▓┐р▓и р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓др▓Чр│Кр▓│р▓┐р▓╕р▓┐"
            }
        }
        
        # Emergency contacts
        self.emergency_contacts = {
            "en": """ЁЯЪи **EMERGENCY NUMBERS:**
            
**India Emergency Services:**
тАв **Police:** 100 ЁЯУЮ
тАв **Fire Brigade:** 101 ЁЯЪТ
тАв **Ambulance:** 108 ЁЯЪС
тАв **Disaster Management:** 1070 ЁЯМкя╕П
тАв **Women Helpline:** 1091 ЁЯСй
тАв **Child Helpline:** 1098 ЁЯС╢
тАв **Tourist Emergency:** 1363 ЁЯз│

**Additional Resources:**
тАв **Blood Bank:** 104
тАв **Poison Control:** 1066""",
            
            "hi": """ЁЯЪи **рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирдВрдмрд░:**
            
**рднрд╛рд░рдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдПрдВ:**
тАв **рдкреБрд▓рд┐рд╕:** 100 ЁЯУЮ
тАв **рджрдордХрд▓:** 101 ЁЯЪТ
тАв **рдПрдореНрдмреБрд▓реЗрдВрд╕:** 108 ЁЯЪС
тАв **рдЖрдкрджрд╛ рдкреНрд░рдмрдВрдзрди:** 1070 ЁЯМкя╕П
тАв **рдорд╣рд┐рд▓рд╛ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди:** 1091 ЁЯСй
тАв **рдмрд╛рд▓ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди:** 1098 ЁЯС╢
тАв **рдкрд░реНрдпрдЯрдХ рдЖрдкрд╛рддрдХрд╛рд▓:** 1363 ЁЯз│

**рдЕрддрд┐рд░рд┐рдХреНрдд рд╕рдВрд╕рд╛рдзрди:**
тАв **рдмреНрд▓рдб рдмреИрдВрдХ:** 104
тАв **рдЬрд╣рд░ рдирд┐рдпрдВрддреНрд░рдг:** 1066""",
            
            "kn": """ЁЯЪи **р▓др│Бр▓░р│Нр▓др│Б р▓╕р▓Вр▓Цр│Нр▓пр│Жр▓Чр▓│р│Б:**
            
**р▓нр▓╛р▓░р▓др▓ж р▓др│Бр▓░р│Нр▓др│Б р▓╕р│Зр▓╡р│Жр▓Чр▓│р│Б:**
тАв **р▓кр│Кр▓▓р│Ар▓╕р│Н:** 100 ЁЯУЮ
тАв **р▓Ер▓Чр│Нр▓ир▓┐р▓╢р▓╛р▓ор▓Х:** 101 ЁЯЪТ
тАв **р▓Жр▓Вр▓мр│Нр▓пр│Бр▓▓р│Жр▓ир│Нр▓╕р│Н:** 108 ЁЯЪС
тАв **р▓╡р▓┐р▓кр▓др│Нр▓др│Б р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж:** 1070 ЁЯМкя╕П
тАв **р▓ор▓╣р▓┐р▓│р▓╛ р▓╕р▓╣р▓╛р▓пр▓╡р▓╛р▓гр▓┐:** 1091 ЁЯСй
тАв **р▓ор▓Хр│Нр▓Хр▓│ р▓╕р▓╣р▓╛р▓пр▓╡р▓╛р▓гр▓┐:** 1098 ЁЯС╢
тАв **р▓кр│Нр▓░р▓╡р▓╛р▓╕р▓┐ р▓др│Бр▓░р│Нр▓др│Б:** 1363 ЁЯз│

**р▓╣р│Жр▓Ър│Нр▓Ър│Бр▓╡р▓░р▓┐ р▓╕р▓Вр▓кр▓ир│Нр▓ор│Вр▓▓р▓Чр▓│р│Б:**
тАв **р▓░р▓Хр│Нр▓д р▓мр│Нр▓пр▓╛р▓Вр▓Хр│Н:** 104
тАв **р▓╡р▓┐р▓╖ р▓ир▓┐р▓пр▓Вр▓др│Нр▓░р▓г:** 1066"""
        }
        
        # Initialize feedback storage
        self.feedback_file = "disaster_bot_feedback.csv"
        self.init_feedback_storage()
    
    def init_feedback_storage(self):
        """Initialize CSV file for feedback storage"""
        if not os.path.exists(self.feedback_file):
            with open(self.feedback_file, 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(['timestamp', 'language', 'location', 'safety_status', 'govt_rating', 'feedback'])
    
    def translate_text(self, text: str, target_lang: str) -> str:
        """Simple translation using LibreTranslate"""
        if target_lang == "en":
            return text
        
        try:
            url = "https://libretranslate.de/translate"
            data = {
                "q": text,
                "source": "en",
                "target": target_lang,
                "format": "text"
            }
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                return response.json()["translatedText"]
        except:
            pass
        
        return text
    
    def get_weather(self, location: str) -> str:
        """Get current weather information"""
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={self.weather_api_key}&units=metric"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description'].title()
                humidity = data['main']['humidity']
                feels_like = data['main']['feels_like']
                wind_speed = data['wind']['speed']
                
                return f"""ЁЯМдя╕П **Current Weather in {location}:**
                
**Temperature:** {temp}┬░C (Feels like {feels_like}┬░C)
**Condition:** {description}
**Humidity:** {humidity}%
**Wind Speed:** {wind_speed} m/s
                
*Last updated: {datetime.now().strftime('%I:%M %p')}*"""
        except Exception as e:
            return f"тЭМ Unable to fetch weather for {location}. Please check the location name."
    
    def get_disaster_advice(self, disaster_type: str, language: str) -> str:
        """Get disaster-specific advice from knowledge base"""
        disaster_type = disaster_type.lower()
        for key in self.knowledge_base:
            if key in disaster_type:
                return self.knowledge_base[key].get(language, self.knowledge_base[key]["en"])
        return None
    
    def use_granite_llm(self, prompt: str) -> str:
        """Use Granite LLM for technical/coding questions"""
        if not self.granite_llm:
            return None
        
        try:
            response = self.granite_llm(prompt, max_length=300, do_sample=True, temperature=0.7, pad_token_id=50256)
            return response[0]['generated_text'][len(prompt):].strip()
        except:
            return None
    
    def use_gemini(self, prompt: str) -> str:
        """Use Gemini for general questions"""
        try:
            response = self.gemini_model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"I'm having trouble connecting to my knowledge base: {str(e)}"
    
    def get_ai_response(self, question: str, language: str) -> str:
        """Get AI response using RAG-like approach"""
        # Check knowledge base first
        disaster_advice = self.get_disaster_advice(question, language)
        if disaster_advice:
            return disaster_advice
        
        # For technical/coding questions, try Granite LLM
        if any(word in question.lower() for word in ['code', 'programming', 'technical', 'software', 'python', 'javascript']):
            granite_response = self.use_granite_llm(question)
            if granite_response:
                return f"ЁЯФз **Technical Response:**\n\n{granite_response}"
        
        # Use Gemini for general questions
        prompt = f"""You are a helpful disaster response assistant. Answer this question briefly and helpfully: {question}
        
        Focus on:
        - Safety and emergency information
        - Practical, actionable advice
        - Keep response under 250 words
        - Use emojis where appropriate
        - Be supportive and reassuring
        """
        
        response = self.use_gemini(prompt)
        
        # Translate if needed
        if language != "en":
            response = self.translate_text(response, language)
        
        return response
    
    def save_feedback(self, safety_status: str, govt_rating: str, feedback: str, language: str, location: str):
        """Save user feedback to CSV"""
        with open(self.feedback_file, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([
                datetime.now().isoformat(),
                language,
                location,
                safety_status,
                govt_rating,
                feedback
            ])

# Initialize the bot
@st.cache_resource
def load_bot():
    return DisasterResponseBot()

def main():
    # Page configuration
    st.set_page_config(
        page_title="ЁЯЪи Disaster Response Bot",
        page_icon="ЁЯЪи",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        color: white;
        margin-bottom: 20px;
    }
    .feature-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #4ecdc4;
        margin: 10px 0;
    }
    .emergency-number {
        background: #ffe6e6;
        padding: 10px;
        border-radius: 5px;
        border-left: 3px solid red;
        margin: 5px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Initialize session state
    if 'bot' not in st.session_state:
        st.session_state.bot = load_bot()
    
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    
    if 'location' not in st.session_state:
        st.session_state.location = ''
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    bot = st.session_state.bot
    
    # Main header
    st.markdown("""
    <div class="main-header">
        <h1>ЁЯЪи Disaster Response Bot</h1>
        <p>Your AI-powered emergency assistant for safety and support</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar for settings
    st.sidebar.header("тЪЩя╕П Settings")
    
    # Language selection
    selected_language = st.sidebar.selectbox(
        "ЁЯМН Select Language",
        options=list(bot.languages.keys()),
        format_func=lambda x: f"{bot.languages[x]['flag']} {x}"
    )
    st.session_state.language = bot.languages[selected_language]['code']
    
    # Location input
    st.session_state.location = st.sidebar.text_input(
        "ЁЯУН Your Location/City",
        value=st.session_state.location,
        placeholder="Enter your city name"
    )
    
    # Create tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "ЁЯдЦ AI Assistant",
        "ЁЯМдя╕П Weather",
        "тЪая╕П Disaster Guide",
        "ЁЯУЮ Emergency",
        "ЁЯУЭ Feedback"
    ])
    
    # Tab 1: AI Assistant (Chat Interface)
    with tab1:
        st.header("ЁЯТм Chat with AI Assistant")
        
        # Chat container
        chat_container = st.container()
        
        # Display chat history
        with chat_container:
            for i, (user_msg, bot_msg) in enumerate(st.session_state.chat_history):
                st.chat_message("user").write(user_msg)
                st.chat_message("assistant").write(bot_msg)
        
        # Chat input
        user_question = st.chat_input("Ask me anything about disasters, safety, or emergency preparedness...")
        
        if user_question:
            # Add user message to history
            st.session_state.chat_history.append((user_question, ""))
            
            # Display user message
            st.chat_message("user").write(user_question)
            
            # Get bot response
            with st.chat_message("assistant"):
                with st.spinner("Thinking..."):
                    response = bot.get_ai_response(user_question, st.session_state.language)
                st.write(response)
            
            # Update chat history
            st.session_state.chat_history[-1] = (user_question, response)
    
    # Tab 2: Weather Information
    with tab2:
        st.header("ЁЯМдя╕П Weather Information")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            weather_location = st.text_input(
                "Enter location for weather update:",
                value=st.session_state.location,
                placeholder="e.g., Bangalore, Mumbai, Delhi"
            )
        
        with col2:
            if st.button("ЁЯФД Get Weather", type="primary"):
                if weather_location:
                    weather_info = bot.get_weather(weather_location)
                    st.markdown(weather_info)
                else:
                    st.warning("Please enter a location")
    
    # Tab 3: Disaster Guide
    with tab3:
        st.header("тЪая╕П Disaster Safety Guide")
        
        disaster_type = st.selectbox(
            "Select disaster type for safety information:",
            ["Select...", "Flood", "Earthquake", "Heatwave", "Cyclone"]
        )
        
        if disaster_type != "Select...":
            advice = bot.get_disaster_advice(disaster_type.lower(), st.session_state.language)
            if advice:
                st.markdown(f"""
                <div class="feature-card">
                {advice}
                </div>
                """, unsafe_allow_html=True)
        
        # Additional safety tips
        st.subheader("ЁЯУЛ General Emergency Preparedness")
        st.markdown("""
        - **Emergency Kit:** Water, non-perishable food, flashlight, battery radio
        - **Important Documents:** Keep copies in waterproof container
        - **Communication Plan:** Establish meeting points and contact methods
        - **Stay Informed:** Monitor weather alerts and emergency broadcasts
        - **First Aid:** Learn basic first aid and CPR
        """)
    
    # Tab 4: Emergency Contacts
    with tab4:
        st.header("ЁЯУЮ Emergency Contacts")
        
        contacts = bot.emergency_contacts.get(st.session_state.language, bot.emergency_contacts["en"])
        st.markdown(contacts)
        
        # Quick dial buttons
        st.subheader("ЁЯЪи Quick Dial")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("ЁЯЪФ Police\n100", help="Call Police"):
                st.info("Dial 100 for Police emergency")
        
        with col2:
            if st.button("ЁЯЪТ Fire\n101", help="Call Fire Brigade"):
                st.info("Dial 101 for Fire emergency")
        
        with col3:
            if st.button("ЁЯЪС Ambulance\n108", help="Call Ambulance"):
                st.info("Dial 108 for Medical emergency")
        
        with col4:
            if st.button("ЁЯМкя╕П Disaster\n1070", help="Call Disaster Management"):
                st.info("Dial 1070 for Disaster Management")
    
    # Tab 5: Safety Check & Feedback
    with tab5:
        st.header("ЁЯУЭ Safety Check & Feedback")
        
        with st.form("feedback_form"):
            st.subheader("Are you safe?")
            
            safety_status = st.radio(
                "Current safety status:",
                ["I am safe", "I need help", "Others need help", "Uncertain"]
            )
            
            govt_rating = st.slider(
                "Rate government response (1-5):",
                min_value=1,
                max_value=5,
                value=3
            )
            
            feedback_text = st.text_area(
                "Additional feedback or situation report:",
                placeholder="Describe the situation, needs, or any observations..."
            )
            
            if st.form_submit_button("ЁЯУд Submit Feedback", type="primary"):
                bot.save_feedback(
                    safety_status,
                    str(govt_rating),
                    feedback_text,
                    st.session_state.language,
                    st.session_state.location
                )
                st.success("тЬЕ Feedback submitted successfully! Thank you for the information.")
        
        # Display feedback summary (if admin)
        if st.checkbox("ЁЯФН View Feedback Summary (Admin)"):
            try:
                df = pd.read_csv(bot.feedback_file)
                if not df.empty:
                    st.subheader("ЁЯУК Feedback Analytics")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**Safety Status Distribution:**")
                        safety_counts = df['safety_status'].value_counts()
                        st.bar_chart(safety_counts)
                    
                    with col2:
                        st.write("**Government Rating Average:**")
                        avg_rating = df['govt_rating'].astype(float).mean()
                        st.metric("Average Rating", f"{avg_rating:.1f}/5")
                    
                    st.write("**Recent Feedback:**")
                    st.dataframe(df.tail(10), use_container_width=True)
                else:
                    st.info("No feedback data available yet.")
            except FileNotFoundError:
                st.info("No feedback data available yet.")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ЁЯЪи <strong>Disaster Response Bot</strong> | Stay Safe, Stay Informed</p>
        <p>For immediate emergencies, always call local emergency services first!</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()